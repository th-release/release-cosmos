syntax = "proto3";

package release.currency.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "release/currency/v1/params.proto";

option go_package = "release/x/currency/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreateToken defines the CreateToken RPC.
  rpc CreateToken(MsgCreateToken) returns (MsgCreateTokenResponse);

  // UpdateToken defines the UpdateToken RPC.
  rpc UpdateToken(MsgUpdateToken) returns (MsgUpdateTokenResponse);

  // MintToken defines the MintToken RPC.
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);

  // BurnToken defines the BurnToken RPC.
  rpc BurnToken(MsgBurnToken) returns (MsgBurnTokenResponse);

  // TransferToken defines the TransferToken RPC.
  rpc TransferToken(MsgTransferToken) returns (MsgTransferTokenResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "release/x/currency/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateToken defines the MsgCreateToken message.
message MsgCreateToken {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  string name = 3;
  string symbol = 4;
  string metadata_url = 5;
  int64 total_supply = 6;
  int64 supply = 7;
  int64 decimals = 8;
  int64 initial_price = 9;
}

// MsgCreateTokenResponse defines the MsgCreateTokenResponse message.
message MsgCreateTokenResponse {}

// MsgUpdateToken defines the MsgUpdateToken message.
message MsgUpdateToken {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  string name = 3;
  string symbol = 4;
  string metadata_url = 5;
  int64 total_supply = 6;
  int64 supply = 7;
  int64 decimals = 8;
  int64 initial_price = 9;
}

// MsgUpdateTokenResponse defines the MsgUpdateTokenResponse message.
message MsgUpdateTokenResponse {}

// MsgMintToken defines the MsgMintToken message.
message MsgMintToken {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  int64 amount = 3;
  string to = 4;
}

// MsgMintTokenResponse defines the MsgMintTokenResponse message.
message MsgMintTokenResponse {}

// MsgBurnToken defines the MsgBurnToken message.
message MsgBurnToken {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  int64 amount = 3;
  string from = 4;
}

// MsgBurnTokenResponse defines the MsgBurnTokenResponse message.
message MsgBurnTokenResponse {}

// MsgTransferToken defines the MsgTransferToken message.
message MsgTransferToken {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  int64 amount = 3;
  string from = 4;
  string to = 5;
}

// MsgTransferTokenResponse defines the MsgTransferTokenResponse message.
message MsgTransferTokenResponse {}
