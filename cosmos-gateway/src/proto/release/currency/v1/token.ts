// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: release/currency/v1/token.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "release.currency.v1";

/** Token defines the Token message. */
export interface Token {
  denom: string;
  name: string;
  symbol: string;
  metadataUrl: string;
  totalSupply: number;
  supply: number;
  decimals: number;
  initialPrice: number;
  owner: string;
}

function createBaseToken(): Token {
  return {
    denom: "",
    name: "",
    symbol: "",
    metadataUrl: "",
    totalSupply: 0,
    supply: 0,
    decimals: 0,
    initialPrice: 0,
    owner: "",
  };
}

export const Token: MessageFns<Token> = {
  encode(message: Token, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.metadataUrl !== "") {
      writer.uint32(34).string(message.metadataUrl);
    }
    if (message.totalSupply !== 0) {
      writer.uint32(40).int64(message.totalSupply);
    }
    if (message.supply !== 0) {
      writer.uint32(48).int64(message.supply);
    }
    if (message.decimals !== 0) {
      writer.uint32(56).int64(message.decimals);
    }
    if (message.initialPrice !== 0) {
      writer.uint32(64).int64(message.initialPrice);
    }
    if (message.owner !== "") {
      writer.uint32(74).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Token {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalSupply = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.supply = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.decimals = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.initialPrice = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Token {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : "",
      totalSupply: isSet(object.totalSupply) ? globalThis.Number(object.totalSupply) : 0,
      supply: isSet(object.supply) ? globalThis.Number(object.supply) : 0,
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      initialPrice: isSet(object.initialPrice) ? globalThis.Number(object.initialPrice) : 0,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: Token): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.metadataUrl !== "") {
      obj.metadataUrl = message.metadataUrl;
    }
    if (message.totalSupply !== 0) {
      obj.totalSupply = Math.round(message.totalSupply);
    }
    if (message.supply !== 0) {
      obj.supply = Math.round(message.supply);
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.initialPrice !== 0) {
      obj.initialPrice = Math.round(message.initialPrice);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Token>, I>>(base?: I): Token {
    return Token.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Token>, I>>(object: I): Token {
    const message = createBaseToken();
    message.denom = object.denom ?? "";
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.metadataUrl = object.metadataUrl ?? "";
    message.totalSupply = object.totalSupply ?? 0;
    message.supply = object.supply ?? 0;
    message.decimals = object.decimals ?? 0;
    message.initialPrice = object.initialPrice ?? 0;
    message.owner = object.owner ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
