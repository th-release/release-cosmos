// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: release/storage/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "release.storage.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgCreateStorage defines the MsgCreateStorage message. */
export interface MsgCreateStorage {
  owner: string;
  denom: string;
  data: string;
}

/** MsgCreateStorageResponse defines the MsgCreateStorageResponse message. */
export interface MsgCreateStorageResponse {
}

/** MsgUpdateStorage defines the MsgUpdateStorage message. */
export interface MsgUpdateStorage {
  owner: string;
  denom: string;
  data: string;
}

/** MsgUpdateStorageResponse defines the MsgUpdateStorageResponse message. */
export interface MsgUpdateStorageResponse {
}

/** MsgDeleteStorage defines the MsgDeleteStorage message. */
export interface MsgDeleteStorage {
  owner: string;
  denom: string;
}

/** MsgDeleteStorageResponse defines the MsgDeleteStorageResponse message. */
export interface MsgDeleteStorageResponse {
}

/** MsgCreateData defines the MsgCreateData message. */
export interface MsgCreateData {
  owner: string;
  denom: string;
  key: string;
  value: string;
}

/** MsgCreateDataResponse defines the MsgCreateDataResponse message. */
export interface MsgCreateDataResponse {
}

/** MsgUpdateData defines the MsgUpdateData message. */
export interface MsgUpdateData {
  owner: string;
  denom: string;
  key: string;
  value: string;
}

/** MsgUpdateDataResponse defines the MsgUpdateDataResponse message. */
export interface MsgUpdateDataResponse {
}

/** MsgDeleteData defines the MsgDeleteData message. */
export interface MsgDeleteData {
  owner: string;
  denom: string;
  key: string;
}

/** MsgDeleteDataResponse defines the MsgDeleteDataResponse message. */
export interface MsgDeleteDataResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateStorage(): MsgCreateStorage {
  return { owner: "", denom: "", data: "" };
}

export const MsgCreateStorage: MessageFns<MsgCreateStorage> = {
  encode(message: MsgCreateStorage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateStorage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateStorage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateStorage {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: MsgCreateStorage): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateStorage>, I>>(base?: I): MsgCreateStorage {
    return MsgCreateStorage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateStorage>, I>>(object: I): MsgCreateStorage {
    const message = createBaseMsgCreateStorage();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseMsgCreateStorageResponse(): MsgCreateStorageResponse {
  return {};
}

export const MsgCreateStorageResponse: MessageFns<MsgCreateStorageResponse> = {
  encode(_: MsgCreateStorageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateStorageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateStorageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateStorageResponse {
    return {};
  },

  toJSON(_: MsgCreateStorageResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateStorageResponse>, I>>(base?: I): MsgCreateStorageResponse {
    return MsgCreateStorageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateStorageResponse>, I>>(_: I): MsgCreateStorageResponse {
    const message = createBaseMsgCreateStorageResponse();
    return message;
  },
};

function createBaseMsgUpdateStorage(): MsgUpdateStorage {
  return { owner: "", denom: "", data: "" };
}

export const MsgUpdateStorage: MessageFns<MsgUpdateStorage> = {
  encode(message: MsgUpdateStorage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateStorage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateStorage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateStorage {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: MsgUpdateStorage): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateStorage>, I>>(base?: I): MsgUpdateStorage {
    return MsgUpdateStorage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateStorage>, I>>(object: I): MsgUpdateStorage {
    const message = createBaseMsgUpdateStorage();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseMsgUpdateStorageResponse(): MsgUpdateStorageResponse {
  return {};
}

export const MsgUpdateStorageResponse: MessageFns<MsgUpdateStorageResponse> = {
  encode(_: MsgUpdateStorageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateStorageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateStorageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateStorageResponse {
    return {};
  },

  toJSON(_: MsgUpdateStorageResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateStorageResponse>, I>>(base?: I): MsgUpdateStorageResponse {
    return MsgUpdateStorageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateStorageResponse>, I>>(_: I): MsgUpdateStorageResponse {
    const message = createBaseMsgUpdateStorageResponse();
    return message;
  },
};

function createBaseMsgDeleteStorage(): MsgDeleteStorage {
  return { owner: "", denom: "" };
}

export const MsgDeleteStorage: MessageFns<MsgDeleteStorage> = {
  encode(message: MsgDeleteStorage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteStorage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteStorage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteStorage {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
    };
  },

  toJSON(message: MsgDeleteStorage): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteStorage>, I>>(base?: I): MsgDeleteStorage {
    return MsgDeleteStorage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteStorage>, I>>(object: I): MsgDeleteStorage {
    const message = createBaseMsgDeleteStorage();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseMsgDeleteStorageResponse(): MsgDeleteStorageResponse {
  return {};
}

export const MsgDeleteStorageResponse: MessageFns<MsgDeleteStorageResponse> = {
  encode(_: MsgDeleteStorageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteStorageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteStorageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteStorageResponse {
    return {};
  },

  toJSON(_: MsgDeleteStorageResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteStorageResponse>, I>>(base?: I): MsgDeleteStorageResponse {
    return MsgDeleteStorageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteStorageResponse>, I>>(_: I): MsgDeleteStorageResponse {
    const message = createBaseMsgDeleteStorageResponse();
    return message;
  },
};

function createBaseMsgCreateData(): MsgCreateData {
  return { owner: "", denom: "", key: "", value: "" };
}

export const MsgCreateData: MessageFns<MsgCreateData> = {
  encode(message: MsgCreateData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateData {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MsgCreateData): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateData>, I>>(base?: I): MsgCreateData {
    return MsgCreateData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateData>, I>>(object: I): MsgCreateData {
    const message = createBaseMsgCreateData();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMsgCreateDataResponse(): MsgCreateDataResponse {
  return {};
}

export const MsgCreateDataResponse: MessageFns<MsgCreateDataResponse> = {
  encode(_: MsgCreateDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateDataResponse {
    return {};
  },

  toJSON(_: MsgCreateDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDataResponse>, I>>(base?: I): MsgCreateDataResponse {
    return MsgCreateDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDataResponse>, I>>(_: I): MsgCreateDataResponse {
    const message = createBaseMsgCreateDataResponse();
    return message;
  },
};

function createBaseMsgUpdateData(): MsgUpdateData {
  return { owner: "", denom: "", key: "", value: "" };
}

export const MsgUpdateData: MessageFns<MsgUpdateData> = {
  encode(message: MsgUpdateData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateData {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MsgUpdateData): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateData>, I>>(base?: I): MsgUpdateData {
    return MsgUpdateData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateData>, I>>(object: I): MsgUpdateData {
    const message = createBaseMsgUpdateData();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMsgUpdateDataResponse(): MsgUpdateDataResponse {
  return {};
}

export const MsgUpdateDataResponse: MessageFns<MsgUpdateDataResponse> = {
  encode(_: MsgUpdateDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateDataResponse {
    return {};
  },

  toJSON(_: MsgUpdateDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateDataResponse>, I>>(base?: I): MsgUpdateDataResponse {
    return MsgUpdateDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateDataResponse>, I>>(_: I): MsgUpdateDataResponse {
    const message = createBaseMsgUpdateDataResponse();
    return message;
  },
};

function createBaseMsgDeleteData(): MsgDeleteData {
  return { owner: "", denom: "", key: "" };
}

export const MsgDeleteData: MessageFns<MsgDeleteData> = {
  encode(message: MsgDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteData {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: MsgDeleteData): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteData>, I>>(base?: I): MsgDeleteData {
    return MsgDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteData>, I>>(object: I): MsgDeleteData {
    const message = createBaseMsgDeleteData();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseMsgDeleteDataResponse(): MsgDeleteDataResponse {
  return {};
}

export const MsgDeleteDataResponse: MessageFns<MsgDeleteDataResponse> = {
  encode(_: MsgDeleteDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteDataResponse {
    return {};
  },

  toJSON(_: MsgDeleteDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteDataResponse>, I>>(base?: I): MsgDeleteDataResponse {
    return MsgDeleteDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteDataResponse>, I>>(_: I): MsgDeleteDataResponse {
    const message = createBaseMsgDeleteDataResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** CreateStorage defines the CreateStorage RPC. */
  CreateStorage(request: MsgCreateStorage): Promise<MsgCreateStorageResponse>;
  /** UpdateStorage defines the UpdateStorage RPC. */
  UpdateStorage(request: MsgUpdateStorage): Promise<MsgUpdateStorageResponse>;
  /** DeleteStorage defines the DeleteStorage RPC. */
  DeleteStorage(request: MsgDeleteStorage): Promise<MsgDeleteStorageResponse>;
  /** CreateData defines the CreateData RPC. */
  CreateData(request: MsgCreateData): Promise<MsgCreateDataResponse>;
  /** UpdateData defines the UpdateData RPC. */
  UpdateData(request: MsgUpdateData): Promise<MsgUpdateDataResponse>;
  /** DeleteData defines the DeleteData RPC. */
  DeleteData(request: MsgDeleteData): Promise<MsgDeleteDataResponse>;
}

export const MsgServiceName = "release.storage.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateStorage = this.CreateStorage.bind(this);
    this.UpdateStorage = this.UpdateStorage.bind(this);
    this.DeleteStorage = this.DeleteStorage.bind(this);
    this.CreateData = this.CreateData.bind(this);
    this.UpdateData = this.UpdateData.bind(this);
    this.DeleteData = this.DeleteData.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateStorage(request: MsgCreateStorage): Promise<MsgCreateStorageResponse> {
    const data = MsgCreateStorage.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateStorage", data);
    return promise.then((data) => MsgCreateStorageResponse.decode(new BinaryReader(data)));
  }

  UpdateStorage(request: MsgUpdateStorage): Promise<MsgUpdateStorageResponse> {
    const data = MsgUpdateStorage.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateStorage", data);
    return promise.then((data) => MsgUpdateStorageResponse.decode(new BinaryReader(data)));
  }

  DeleteStorage(request: MsgDeleteStorage): Promise<MsgDeleteStorageResponse> {
    const data = MsgDeleteStorage.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteStorage", data);
    return promise.then((data) => MsgDeleteStorageResponse.decode(new BinaryReader(data)));
  }

  CreateData(request: MsgCreateData): Promise<MsgCreateDataResponse> {
    const data = MsgCreateData.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateData", data);
    return promise.then((data) => MsgCreateDataResponse.decode(new BinaryReader(data)));
  }

  UpdateData(request: MsgUpdateData): Promise<MsgUpdateDataResponse> {
    const data = MsgUpdateData.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateData", data);
    return promise.then((data) => MsgUpdateDataResponse.decode(new BinaryReader(data)));
  }

  DeleteData(request: MsgDeleteData): Promise<MsgDeleteDataResponse> {
    const data = MsgDeleteData.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteData", data);
    return promise.then((data) => MsgDeleteDataResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
