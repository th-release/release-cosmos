version: '3.8'

networks:
  release-network:
    name: release-network

services:
  seed-node:
    image: released:latest
    container_name: seed-node
    ports:
      - "26656:26656"  # P2P PORT
      - "26657:26657"  # RPC PORT
      - "1317:1317"    # REST API PORT
      - "9090:9090"    # gRPC PORT
    volumes:
      - ./docker/validator1:/root/.release
    networks:
      - release-network
    environment:
      CHAIN_ID: "release-chain"
      MONIKER: "validator"
      KEYRING_BACKEND: "test"
      BLOCKCHAIN_HOME: "/root/.release"
      MINIMUM_GAS_PRICES: "0stake"
    command: >
      sh -c "
        echo 'üîß Env Check...'
        echo 'CHAIN_ID: '$${CHAIN_ID}
        echo 'MONIKER: '$${MONIKER}
        echo 'BLOCKCHAIN_HOME: '$${BLOCKCHAIN_HOME}
        echo 'KEYRING_BACKEND: '$${KEYRING_BACKEND}
        echo 'MINIMUM_GAS_PRICES: '$${MINIMUM_GAS_PRICES}
        
        if ! command -v ./released &> /dev/null; then
          echo '‚ùå released Not Found Binary File'
          echo 'Binaries:'
          ls -la /usr/local/bin/ || ls -la /usr/bin/ || echo 'Not Found Binary File'
          exit 1
        fi
        
        mkdir -p $${BLOCKCHAIN_HOME}
        
        if [ ! -f $${BLOCKCHAIN_HOME}/config/genesis.json ]; then
          echo 'üîß Node Init...'
          
          ./released init $${MONIKER} --chain-id $${CHAIN_ID} --home $${BLOCKCHAIN_HOME}
          
          echo 'y' | ./released keys add validator --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME} || echo 'Key Generate Failed'
          
          ./released genesis add-genesis-account validator 1000000000stake --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME}

          echo 'y' | ./released keys add validator2 --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME} || echo 'Key Generate Failed'
          echo 'y' | ./released keys add validator3 --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME} || echo 'Key Generate Failed'
          
          ./released genesis add-genesis-account validator2 1000000000stake --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME}
          ./released genesis add-genesis-account validator3 1000000000stake --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME}

          ./released genesis gentx validator 100000000stake --chain-id $${CHAIN_ID} --keyring-backend $${KEYRING_BACKEND} --home $${BLOCKCHAIN_HOME}
          
          ./released genesis collect-gentxs --home $${BLOCKCHAIN_HOME}
          
          echo '‚úÖ Node Init'

          NODE_ID=$$(./released comet show-node-id --home $${BLOCKCHAIN_HOME})
          echo 'üìã SEED NODE ID: '$${NODE_ID}
          echo 'üîó Connect Information: '$${NODE_ID}'@seed-node:26656'
        else
          echo '‚úÖ Node Inited, Skip'
          NODE_ID=$$(./released comet show-node-id --home $${BLOCKCHAIN_HOME})
          echo 'üìã SEED NODE ID: '$${NODE_ID}
          echo 'üîó Connect Information: '$${NODE_ID}'@seed-node:26656'
        fi
        
        if [ -f $${BLOCKCHAIN_HOME}/config/app.toml ]; then
          echo 'üîß app.toml Setting...'
          sed -i.bak 's/minimum-gas-prices = \"\"/minimum-gas-prices = \"'$${MINIMUM_GAS_PRICES}'\"/g' $${BLOCKCHAIN_HOME}/config/app.toml
          sed -i.bak 's/enable = false/enable = true/g' $${BLOCKCHAIN_HOME}/config/app.toml
          sed -i.bak 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $${BLOCKCHAIN_HOME}/config/app.toml
        else
          echo '‚ùå Not Found app.toml'
        fi
        
        if [ -f $${BLOCKCHAIN_HOME}/config/config.toml ]; then
          echo 'üîß config.toml Setting...'
          sed -i.bak 's#laddr = \"tcp://127.0.0.1:26657\"#laddr = \"tcp://0.0.0.0:26657\"#g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/cors_allowed_origins = \[\]/cors_allowed_origins = \[\"*\"\]/g' $${BLOCKCHAIN_HOME}/config/config.toml

          sed -i.bak 's#laddr = \"tcp://0.0.0.0:26656\"#laddr = \"tcp://0.0.0.0:26656\"#g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/addr_book_strict = true/addr_book_strict = false/g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/allow_duplicate_ip = false/allow_duplicate_ip = true/g' $${BLOCKCHAIN_HOME}/config/config.toml
        else
          echo '‚ùå Not Found config.toml'
        fi
        
        echo 'üöÄ Node Ready!'
      "
    
  # Alice Í≤ÄÏ¶ùÏûê
  validator2:
    image: released:latest
    container_name: validator2
    ports:
      - "26666:26656"
      - "26667:26657"
      - "1327:1317"
      - "9080:9090"
    volumes:
      - ./docker/validator2:/root/.release
    networks:
      - release-network
    environment:
      CHAIN_ID: "release-chain"
      MONIKER: "validator2"
      KEYRING_BACKEND: "test"
      BLOCKCHAIN_HOME: "/root/.release"
      MINIMUM_GAS_PRICES: "0stake"
    command: >
      sh -c "
        echo 'validator2 start'
        echo 'üîß validator2 env check...'
        echo 'CHAIN_ID: '$${CHAIN_ID}
        echo 'MONIKER: '$${MONIKER}
        echo 'BLOCKCHAIN_HOME: '$${BLOCKCHAIN_HOME}
        echo 'KEYRING_BACKEND: '$${KEYRING_BACKEND}
        echo 'MINIMUM_GAS_PRICES: '$${MINIMUM_GAS_PRICES}
        
        mkdir -p $${BLOCKCHAIN_HOME}

        if [ ! -f $${BLOCKCHAIN_HOME}/config/genesis.json ]; then
          echo 'üîß validator2 initing..'
          ./released init $${MONIKER} --chain-id $${CHAIN_ID} --home $${BLOCKCHAIN_HOME}

          echo '‚úÖ validator2 init!'
        fi
        
        if [ -f $${BLOCKCHAIN_HOME}/config/app.toml ]; then
          sed -i.bak 's/minimum-gas-prices = \"\"/minimum-gas-prices = \"'$${MINIMUM_GAS_PRICES}'\"/g' $${BLOCKCHAIN_HOME}/config/app.toml
          sed -i.bak 's/enable = false/enable = true/g' $${BLOCKCHAIN_HOME}/config/app.toml
          sed -i.bak 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $${BLOCKCHAIN_HOME}/config/app.toml
        fi
        
        if [ -f $${BLOCKCHAIN_HOME}/config/config.toml ]; then
          sed -i.bak 's#laddr = \"tcp://127.0.0.1:26657\"#laddr = \"tcp://0.0.0.0:26657\"#g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/cors_allowed_origins = \[\]/cors_allowed_origins = \[\"*\"\]/g' $${BLOCKCHAIN_HOME}/config/config.toml
          
          sed -i.bak 's/addr_book_strict = true/addr_book_strict = false/g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/allow_duplicate_ip = false/allow_duplicate_ip = true/g' $${BLOCKCHAIN_HOME}/config/config.toml        
        fi

        NODE_ID=$$(./released comet show-node-id --home $${BLOCKCHAIN_HOME})
        echo 'üìã SEED NODE ID: '$${NODE_ID}
        echo 'üîó Connect Information: '$${NODE_ID}'@validator2:26656'
        echo 'üöÄ validator2 validator2 Ready!'
      "

  # Bob Í≤ÄÏ¶ùÏûê
  validator3:
    image: released:latest
    container_name: validator3
    ports:
      - "26686:26656"
      - "26687:26657"
      - "1347:1317"
      - "9071:9090"
    volumes:
      - ./docker/validator3:/root/.release
    networks:
      - release-network
    environment:
      CHAIN_ID: "release-chain"
      MONIKER: "validator3"
      KEYRING_BACKEND: "test"
      BLOCKCHAIN_HOME: "/root/.release"
      MINIMUM_GAS_PRICES: "0stake"
    command: >
      sh -c "
        echo 'validator3 Í≤ÄÏ¶ùÏûê ÏãúÏûë'
        echo 'üîß validator3 ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏...'
        echo 'CHAIN_ID: '$${CHAIN_ID}
        echo 'MONIKER: '$${MONIKER}
        echo 'BLOCKCHAIN_HOME: '$${BLOCKCHAIN_HOME}
        echo 'KEYRING_BACKEND: '$${KEYRING_BACKEND}
        echo 'MINIMUM_GAS_PRICES: '$${MINIMUM_GAS_PRICES}

        mkdir -p $${BLOCKCHAIN_HOME}
        
        if [ ! -f $${BLOCKCHAIN_HOME}/config/genesis.json ]; then
          echo 'üîß validator3 initing..'
          
          ./released init $${MONIKER} --chain-id $${CHAIN_ID} --home $${BLOCKCHAIN_HOME}
          
          echo '‚úÖ validator3 init!'
        fi
        
        if [ -f $${BLOCKCHAIN_HOME}/config/app.toml ]; then
          sed -i.bak 's/minimum-gas-prices = \"\"/minimum-gas-prices = \"'$${MINIMUM_GAS_PRICES}'\"/g' $${BLOCKCHAIN_HOME}/config/app.toml
          sed -i.bak 's/enable = false/enable = true/g' $${BLOCKCHAIN_HOME}/config/app.toml
          sed -i.bak 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $${BLOCKCHAIN_HOME}/config/app.toml
        fi
        
        if [ -f $${BLOCKCHAIN_HOME}/config/config.toml ]; then
          sed -i.bak 's#laddr = \"tcp://127.0.0.1:26657\"#laddr = \"tcp://0.0.0.0:26657\"#g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/cors_allowed_origins = \[\]/cors_allowed_origins = \[\"*\"\]/g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/addr_book_strict = true/addr_book_strict = false/g' $${BLOCKCHAIN_HOME}/config/config.toml
          sed -i.bak 's/allow_duplicate_ip = false/allow_duplicate_ip = true/g' $${BLOCKCHAIN_HOME}/config/config.toml
        fi
        
        NODE_ID=$$(./released comet show-node-id --home $${BLOCKCHAIN_HOME})
        echo 'üìã SEED NODE ID: '$${NODE_ID}
        echo 'üîó Connect Information: '$${NODE_ID}'@validator3:26656'
        echo 'üöÄ validator3 validator2 Ready!'
      "